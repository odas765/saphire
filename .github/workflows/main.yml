name: CI

on: [push, workflow_dispatch]

jobs:
  build:
    runs-on: windows-latest

    steps:
    # ------------------------------------------------------------
    # 1) Download & set up Ngrok (v3)
    # ------------------------------------------------------------
    - name: Download Ngrok
      run: Invoke-WebRequest https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-windows-amd64.zip -OutFile ngrok.zip

    - name: Extract Ngrok
      run: Expand-Archive ngrok.zip

    - name: Configure Ngrok authtoken
      shell: pwsh
      run: .\ngrok\ngrok.exe config add-authtoken $Env:NGROK_AUTH_TOKEN
      env:
        NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}

    # ------------------------------------------------------------
    # 2) Enable RDP on this Windows runner
    # ------------------------------------------------------------
    - name: Enable Remote Desktop
      run: |
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0
        Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 1

    - name: Set runneradmin password   # â†™ Replace with secret for real use
      run: Set-LocalUser -Name "runneradmin" -Password (ConvertTo-SecureString -AsPlainText "P@ssw0rd!" -Force)

    # ------------------------------------------------------------
    # 3) Start the Ngrok TCP tunnel and output the public address
    # ------------------------------------------------------------
    - name: Start Ngrok tunnel (tcp 3389) and show endpoint
      shell: pwsh
      run: |
        ./ngrok/ngrok.exe tcp 3389 --log=stdout > ngrok.log 2>&1 &
        Start-Sleep -Seconds 5
        $tunnels = Invoke-RestMethod -Uri http://127.0.0.1:4040/api/tunnels
        if ($tunnels.tunnels.Count -gt 0) {
          $addr = $tunnels.tunnels[0].public_url -replace 'tcp://', ''
          Write-Host "ðŸ”— RDP endpoint: $addr"
          Write-Host "   Username   : runneradmin"
          Write-Host "   Password   : P@ssw0rd!"
        } else {
          Write-Warning "Ngrok started but no tunnels foundâ€”see ngrok.log."
        }

    # ------------------------------------------------------------
    # 4) Add a Startup shortcut so Chrome opens automatically
    #    (bypasses first-run prompts, opens google.com)
    # ------------------------------------------------------------
    - name: Auto-launch Chrome (no first-run) to google.com
      shell: pwsh
      run: |
        $chrome = "${env:ProgramFiles(x86)}\Google\Chrome\Application\chrome.exe"
        if (-not (Test-Path $chrome)) { $chrome = "${env:ProgramFiles}\Google\Chrome\Application\chrome.exe" }

        if (Test-Path $chrome) {
          $startup  = "$env:APPDATA\Microsoft\Windows\Start Menu\Programs\Startup"
          $shortcut = "$startup\LaunchGoogle.lnk"

          $wshell = New-Object -ComObject WScript.Shell
          $sc     = $wshell.CreateShortcut($shortcut)
          $sc.TargetPath   = $chrome
          $sc.Arguments    = "--no-first-run --no-default-browser-check --disable-features=WelcomeScreen --disable-background-mode https://www.google.com"
          $sc.IconLocation = $chrome
          $sc.Save()
        } else {
          Write-Warning "Chrome executable not found (unexpected on windows-latest runner)."
        }
